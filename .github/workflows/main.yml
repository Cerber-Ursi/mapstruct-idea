name: CI

on: [push, pull_request]

jobs:
  test_idea:
    strategy:
      fail-fast: false
      matrix:
        ideaVersion: [2019.3, 2020.1, 2020.2, LATEST-EAP-SNAPSHOT]
    name: 'IDEA ${{ matrix.ideaVersion }}'
    env:
      IDEA_VERSION: ${{ matrix.ideaVersion }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Set up JDK'
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: 'Test'
        run: ./gradlew --warning-mode=all build
      - name: 'Generate coverage report'
        run: ./gradlew --warning-mode=all jacocoTestReport
      - name: 'Upload coverage to Codecov'
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Run detekt, ktlint and tests
      - name: Run Linters and Test
        run: ./gradlew check

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:

      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Cache Gradle Dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          ARTIFACT="${NAME}-${VERSION}.zip"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=artifact::$ARTIFACT"
      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ needs.build.outputs.artifact }}

  # Verify built plugin using IntelliJ Plugin Verifier tool
  # Requires build job to be passed
  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: plugin-artifact

      # Run IntelliJ Plugin Verifier action using GitHub Action
      - name: Verify Plugin
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v1.0.3
        with:
          plugin-location: plugin-artifact/*.zip
          ide-versions: |
            ideaIC:2019.3
            ideaIC:2020.1
            ideaIC:2020.2
            ideaIC:2020.2
            ideaIC:2020.3
            ideaIC:LATEST-EAP-SNAPSHOT
      # Print the output of the verify step
      - name: Print Logs
        if: ${{ always() }}
        env:
          OUTPUT_LOG: ${{ steps.verify.outputs.verification-output-log-filename }}
        run: |
          echo "The verifier log file [$OUTPUT_LOG] contents : " ;
          cat $OUTPUT_LOG
